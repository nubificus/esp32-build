name: Build

on:
  workflow_call:
    inputs:
      actions-repo:
        type: string
        default: 'nubificus/vaccel'
      actions-rev:
        type: string
        default: 'main'
      runner:
        type: string
        default: '["gcc", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
      apps:
        type: string
        default: '["nubificus/esp32-ota-update"]'
      targets:
        type: string
        default: '["esp32", "esp32s2", "esp32s3"]'
      builder_image:
        type: string
        default: 'harbor.nbfc.io/nubificus/esp-idf:x86_64-latest'
      registry:
        type: string
        default: 'harbor.nbfc.io'
      upload-subpath:
        type: string
        default: ''
      keys:
        type: string
        default: '["ESP32_KEY1", "ESP32_KEY2"]'
      upload:
        type: boolean
        default: false
    secrets:
      GIT_CLONE_PAT:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      harbor_user:
        required: false
      harbor_secret:
        required: false
      WIFI_SSID:
        required: false
      WIFI_PASS:
        required: false

jobs:
  build-unsigned:
    name: Build ${{ matrix.app.type }}-${{ matrix.target }}
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        app: ["${{ fromJSON(inputs.apps) }}"]
        target: ["${{ fromJSON(inputs.targets) }}"]
      fail-fast: true
    env:
      ARCH: ${{ fromJson(inputs.runner-arch-map)[0][matrix.arch] }}
      DEFAULT_UPPATH: ${{ format('{0}/{1}', 'nbfc-assets/github/iot', matrix.target) || '' }}
      REGISTRY: ${{ inputs.registry }}
      IMAGE_NAME: ${{ inputs.registry }}/nubificus/esp32-${{ matrix.app.type }}
    permissions:
      contents: write # for uploading the SBOM to the release
      packages: write # for uploading the finished container
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # to complete the identity challenge with sigstore/fulcio when running outside of PRs


    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ inputs.actions-rev }}

      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Determine project name
        id: project_name
        run: |
          project_name=$(basename "${{ matrix.app.repo }}")
          echo "Project name: $project_name"
          echo "PROJECT_NAME=$project_name" >> $GITHUB_ENV

      - name: Checkout app repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.app.repo }}
          ref: ${{ matrix.app.branch }}
          path: ${{ env.PROJECT_NAME }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}


      - name: Build non-signed Firmware
        uses: nubificus/docker-run-action@v4
        id: build_firmware
        with:
          image: ${{ inputs.builder_image }}
          options: -v ${{ github.workspace }}/${{ env.PROJECT_NAME }}:/work
          run: |
            cd /esp-idf && . ./export.sh
            cd /work
            export FIRMWARE_VERSION=${{ matrix.app.version }}
            export DEVICE_TYPE=${{ matrix.target }}
            export APPLICATION_TYPE=${{ matrix.app.type }}
            export WIFI_SSID=${{ secrets.WIFI_SSID }}
            export WIFI_PASS=${{ secrets.WIFI_PASS }}
            idf.py set-target ${{ matrix.target }}
            idf.py build

      - name: Parse CMakeLists.txt to determine binary output
        id: parse_cmakelists
        run: |
          if [ -f "CMakeLists.txt" ]; then
            project_name=$(grep -m1 -oP '(?<=project\().*?(?=\))' CMakeLists.txt | tr -d ' ' || true)
            binary_name=$(grep -m1 -oP '(?<=add_executable\().*?(?=\s)' CMakeLists.txt | tr -d ' ' || true)

            if [ -z "$binary_name" ]; then
              if [ -z "$project_name" ]; then
                echo "No project or binary name found, defaulting to ota.bin"
                BINARY_PATH="build/ota.bin"
              else
                echo "Project name found: $project_name"
                BINARY_PATH="build/$project_name.bin"
              fi
            else
              echo "Binary name found: $binary_name"
              BINARY_PATH="build/$binary_name.bin"
            fi
          else
            echo "CMakeLists.txt not found, defaulting to ota.bin"
            BINARY_PATH="build/ota.bin"
          fi
          echo "BINARY_PATH=$BINARY_PATH" >> $GITHUB_ENV
          BINARY_NAME=$(basename $BINARY_PATH)
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}

      - name: Upload firmware to s3
        if: ${{ inputs.upload || github.event_name == 'workflow_dispatch' }}
        uses: cloudkernels/minio-upload@v4.1
        with:
          url: https://s3.nubificus.co.uk
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: ${{ env.PROJECT_NAME }}/${{ env.BINARY_PATH }}
          remote-path: ${{ (inputs.upload-subpath != '' && inputs.upload-subpath) || env.DEFAULT_UPPATH }}
          policy: 1

      - name: Set short SHA
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.harbor_user }}
          password: ${{ secrets.harbor_secret }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=${{ matrix.target }}-${{ matrix.app.version }}-
 
      - name: Build and push ${{ matrix.app.type }}-${{ matrix.target }}
        id: build-and-push
        uses: docker/build-push-action@master
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: custom/${{ matrix.target }} 
          push: true
          #cache-from: type=local,src=/tmp
          #cache-to: type=local,mode=max,dest=/tmp
          #file: ${{ inputs.dockerfile }}
          file: ./Dockerfile.firmware
          build-args: |
             BINARY=${{ env.PROJECT_NAME }}/${{ env.BINARY_PATH }}
             FIRMWARE=${{ env.BINARY_NAME }}
          #build-contexts: |
          # ${{ steps.base-image-calculator.outputs.base_image }}
          provenance: false
 
      - name: Get image digest
        run: |
          echo "IMAGE_DIGEST=$(docker inspect \
          ${{ env.IMAGE_NAME }}:${{ matrix.target }}-${{ matrix.app.version }}-${{ env.SHA_SHORT }} | \
          jq -r '.[0].Id')" >> $GITHUB_ENV

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
          DIGEST: ${{steps.build-and-push.outputs.digest}}
        run: |
          cosign sign --yes ${{ env.IMAGE_NAME }}@$DIGEST \
          -a "repo=${{matrix.app.repo}}" \
          -a "workflow=${{github.workflow}}" \
          -a "ref=${{github.sha}}" \
          -a "author=Nubificus LTD"

  manifest:
    needs: [build-unsigned]
    runs-on: gcc-dind-2204-amd64 # use the GitHub-hosted runner to build the image
    permissions:
      contents: write # for uploading the SBOM to the release
      packages: write # for uploading the finished container
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # to complete the identity challenge with sigstore/fulcio when running outside of PRs
    strategy:
      matrix:
        app: ["${{ fromJSON(inputs.apps) }}"] 
    env:
      REGISTRY: ${{ inputs.registry }}
      TAG: ${{ matrix.app.version }}
      VER: ${{ matrix.app.version }}
      IMAGE_NAME: ${{ inputs.registry }}/nubificus/esp32-${{ matrix.app.type }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Set short SHA
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Log into registry ${{ inputs.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.harbor_user }}
          password: ${{ secrets.harbor_secret }}

      - name: Process runner architectures and create docker manifest
        id: create-manifest
        run: |
          runner_archs='${{ inputs.targets }}'  # Using the input string array
          amend_command=""

          for arch in $(echo $runner_archs | jq -r '.[]'); do
            #amend_command+=" --amend ${{ env.REGISTRY }}/${{ matrix.app.repo }}:$arch-${{ env.SHA_SHORT }}"
            amend_command+=" --amend ${{ env.IMAGE_NAME }}:$arch-${{ env.VER }}-${{ env.SHA_SHORT }}"
          done

          echo "-------------------- Amend command constructed -------------------"
          echo "$amend_command"

          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.TAG }} $amend_command

          VAR=`docker manifest push ${{ env.IMAGE_NAME }}:${{ env.TAG }} | tail -1`
          echo "manifest_sha=$VAR" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
          DIGEST: ${{steps.create-manifest.outputs.manifest_sha }}
        run: |
          cosign sign --yes ${{ env.IMAGE_NAME }}@$DIGEST \
          -a "repo=${{github.repository}}" \
          -a "workflow=${{github.workflow}}" \
          -a "ref=${{github.sha}}" \
          -a "author=Nubificus LTD"

          #- name: Build container image
          #id: parse_cmakelists
          #working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}
          #run: |
          #docker buildx build --platform custom/esp32 -t harbor.nbfc.io/nubificus/${{ env.PROJECT_NAME }}:${{ matrix.target }} --build-arg BINARY=${{ env.PROJECT_NAME }}/${{ env.BINARY_PATH }} . --push --provenance false


  build-signed:
    name: Build ${{ matrix.app.repo }}-${{ matrix.target }}
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        app: ["${{ fromJSON(inputs.apps) }}"]
        # FIXME: update when we enabled secureboot for s2 and s3
        target: ["esp32"]
        key: ["${{ fromJSON(inputs.keys) }}"]
      fail-fast: true
    env:
      ARCH: ${{ fromJson(inputs.runner-arch-map)[0][matrix.arch] }}
      DEFAULT_UPPATH: ${{ format('{0}/{1}', 'nbfc-assets/github/iot', matrix.target) || '' }}
      ESP32_KEY: ${{ secrets[matrix.key] }}
    if: ${{ inputs.keys != '[""]' }}

    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ inputs.actions-rev }}

      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Determine project name
        id: project_name
        run: |
          project_name=$(basename "${{ matrix.app.repo }}")
          echo "Project name: $project_name"
          echo "PROJECT_NAME=$project_name" >> $GITHUB_ENV

      - name: Checkout app repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.app.repo }}
          ref: ${{ matrix.app.branch }}
          path: ${{ env.PROJECT_NAME }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Build signed Firmware (single)
        uses: nubificus/docker-run-action@v4
        id: build_signed_firmware
        with:
          image: ${{ inputs.builder_image }}
          options: -v ${{ github.workspace }}/${{ env.PROJECT_NAME }}:/work
          run: |
            cd /esp-idf && . ./export.sh
            cd /work
            idf.py set-target ${{ matrix.target }}
            echo "${{ env.ESP32_KEY }} " > secure_boot_signing_key.pem
            idf.py -DSDKCONFIG=sdkconfig.secure build

      - name: Parse CMakeLists.txt to determine binary output
        id: parse_cmakelists
        run: |
          if [ -f "CMakeLists.txt" ]; then
            project_name=$(grep -m1 -oP '(?<=project\().*?(?=\))' CMakeLists.txt | tr -d ' ' || true)
            binary_name=$(grep -m1 -oP '(?<=add_executable\().*?(?=\s)' CMakeLists.txt | tr -d ' ' || true)

            if [ -z "$binary_name" ]; then
              if [ -z "$project_name" ]; then
                echo "No project or binary name found, defaulting to ota.bin"
                BINARY_PATH="build/ota.bin"
              else
                echo "Project name found: $project_name"
                BINARY_PATH="build/$project_name.bin"
              fi
            else
              echo "Binary name found: $binary_name"
              BINARY_PATH="build/$binary_name.bin"
            fi
          else
            echo "CMakeLists.txt not found, defaulting to ota.bin"
            BINARY_PATH="build/ota.bin"
          fi
          echo "BINARY_PATH=$BINARY_PATH" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/${{ env.PROJECT_NAME }}

      - name: Upload firmware to s3
        if: ${{ inputs.upload || github.event_name == 'workflow_dispatch' }}
        uses: cloudkernels/minio-upload@v4.1
        with:
          url: https://s3.nubificus.co.uk
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: ${{ env.PROJECT_NAME }}/${{ env.BINARY_PATH }}
          remote-path: ${{ env.DEFAULT_UPPATH }}-${{ matrix.key }}
          policy: 1
